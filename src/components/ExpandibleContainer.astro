---
interface Props {
  text: string;
}

const { text } = Astro.props;
---

<expandible-container class='expandable-container bg-green-500'>
  <div class='expandable-container-body'>
    {text}
  </div>
</expandible-container>

<script>
  class ExpandibleContainer extends HTMLElement {
    connectedCallback() {
      const blurScreen = document.createElement('div');
      document.body.appendChild(blurScreen);
      let done = false;
      let animation: Animation = null as unknown as Animation;
      let expandableElement = this.querySelector('div') as HTMLElement;
      expandableElement.addEventListener('click', () => {
        if (done) {
          (animation as Animation).reverse();
          done = false;
          //   blurScreen.style.display = 'none';
        } else {
          //   blurScreen.style.display = 'block';
          //   blurScreen.style.position = 'absolute';
          //   blurScreen.style.top = '0';
          //   blurScreen.style.left = '0';
          //   blurScreen.style.width = '100%';
          //   blurScreen.style.height = '100%';
          //   blurScreen.style.backdropFilter = 'blur(5px)';

          console.log(blurScreen);
          console.log(expandableElement);

          console.log(expandableElement.getBoundingClientRect());
          const dom = expandableElement.getBoundingClientRect();
          console.log(window.innerHeight / 2 - dom.top);
          console.log(window.innerWidth / 2 - dom.left);
          animation = expandableElement.animate(
            [
              {
                top: '0px',
                left: '0px',
              },
              {
                width: '70vw',
                height: '70vh',
                top: `${window.innerHeight / 2 - dom.top}px`,
                left: `${window.innerWidth / 2 - dom.left}px`,
                transform: 'translate(-50%, -50%)',
              },
            ],
            {
              duration: 1000, // Adjust the duration as needed
              fill: 'forwards', // Keep the final state after the animation
            }
          );

          done = true;
        }
      });
    }
  }

  customElements.define('expandible-container', ExpandibleContainer);
</script>

<style>
  .expandable-container {
    display: block;

    max-width: 100%;
    max-height: 100%;
  }
  .expandable-container-body {
    position: relative;

    color: red;
    width: 100%;
    height: 200px;
    z-index: 100;
  }
</style>
